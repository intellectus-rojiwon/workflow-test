name: Lambda Function ƛ

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      assume_role_arn:
        required: true
        type: string
      function_name:
        required: true
        type: string

      ecr_aws_region:
        required: true
        type: string
      ecr_registry_id:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      image_tag:
        required: true
        type: string

      architectures: # e.g. x86_64
        required: true
        type: string
      memory: # e.g. 1024
        required: true
        type: number
      ephemeral_storage: # e.g. 512
        required: true
        type: number
      timeout: # e.g. 6
        required: true
        type: number
      provisioned_concurrency: # 3
        required: false
        type: number
      environment:
        required: false
        type: string

jobs:
  depoly:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@main
        with:
          repository: "intellectus-rojiwon/workflow-test"
          path: "workflow-test"
          ref: "main"

      - name: Setup NodeJS
        uses: actions/setup-node@main
        with:
          node-version: "20"

      - name: Create Assume Role Session Name
        id: role-session
        run: |
          ROLE_SESSION_NAME=Lambda-${{ inputs.function_name }}
          echo "name=$ROLE_SESSION_NAME" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials 🔑
        uses: aws-actions/configure-aws-credentials@main
        id: aws
        with:
          role-to-assume: ${{ inputs.assume_role_arn }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: ${{ steps.role-session.outputs.name }}
          output-credentials: true

      - name: Get Docker Image URI By Tag 🐳
        id: image
        run: |
          IMAGE_DIGEST=$(aws ecr describe-images --region ${{ inputs.ecr_aws_region }} --registry-id ${{ inputs.ecr_registry_id }} --repository-name ${{ inputs.ecr_repository }} --image-ids imageTag=${{ inputs.image_tag }} --query 'imageDetails[0].imageDigest' --output text 2>/dev/null)
          IMAGE_BASE="${{ inputs.ecr_registry_id }}.dkr.ecr.${{ inputs.ecr_aws_region }}.amazonaws.com/${{ inputs.ecr_repository }}"
          IMAGE_TAG=${{ inputs.image_tag }}

          if [ -z "$IMAGE_DIGEST" ]; then
            echo "::error title=Image Not Found::Can't found Docker IMAGE $IMAGE_BASE@$IMAGE_TAG"
            exit 1
          fi

          IMAGE_URI=$IMAGE_BASE@$IMAGE_DIGEST

          echo "uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Add Environment
        uses: actions/github-script@main
        with:
          script: |
            const inputs = ${{ inputs.environment }};
            if(inputs === undefined) return;

            const fs = require('fs');
            const path = require('path');

            const json_path = 'workflow-test/cloudformation.json';

            const cloudformation = JSON.parse(fs.readFileSync(json_path, 'utf-8'));
            const original = cloudformation.LambdaFunction.Properties.Environment?.Variables ?? {};
            const Variables = {...original, ...inputs };

            cloudformation.LambdaFunction.Properties.Environment = { Variables };

            console.log(cloudformation);

            fs.writeFileSync(json_path, JSON.stringify(cloudformation, null, 2));

      - name: Deploy Lambda By Cloudformation 🛜
        id: cloudformation
        run: |
          if [ -z "${{ inputs.provisioned_concurrency }}" ]; then
            PROVISIONED=0
          else
            PROVISIONED=${{ inputs.provisioned_concurrency }}
          fi

          STACK_NAME=lambda-${{ inputs.function_name }}-${{ inputs.aws_region }}

          echo "stack_name=$STACK_NAME" >> "$GITHUB_OUTPUT"

          aws cloudformation deploy \
            --template-file workflow-test/cloudformation.json \
            --stack-name $STACK_NAME \
            --parameter-overrides \
                LambdaFunctionName=${{ inputs.function_name }} \
                LambdaImageUri=${{ steps.image.outputs.uri }} \
                LambdaArchitectures=${{ inputs.architectures }} \
                LambdaMemorySize=${{ inputs.memory }} \
                LambdaEphemeralStorageSize=${{ inputs.ephemeral_storage }} \
                LambdaTimeout=${{ inputs.timeout }} \
                ProvisionedConcurrency=$PROVISIONED \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

            echo "::notice title=Cloudformation Stack Name::$STACK_NAME"

      - name: Revoke AWS Role Session 🔒
        if: always() && steps.aws.outcome == 'success'
        run: |
          ROLE_NAME=$(echo ${{ inputs.assume_role_arn }} | cut -d '/' -f 2-)
          ROLE_SESSION_NAME=${{ steps.role-session.outputs.name }}
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          INLINE_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Deny",
                "Action": ["*"],
                "Resource": ["*"],
                "Condition": {
                  "DateLessThan": {
                    "aws:TokenIssueTime": "'"$NOW"'"
                  },
                  "StringEquals": {
                    "sts:RoleSessionName": "'"$ROLE_SESSION_NAME"'"
                  }
                }
              }
            ]
          }'

          aws iam put-role-policy --role-name $ROLE_NAME --policy-name RevokeSession-$ROLE_SESSION_NAME --policy-document "$INLINE_POLICY"

          echo "::notice title=Revoke Role Session::$ROLE_NAME/$ROLE_SESSION_NAME"

      - name: Notice Lambda FunctionUrl 📋
        run: |
          FUNCTION_URL=$(aws cloudformation describe-stacks --stack-name ${{ steps.cloudformation.outputs.stack_name }} --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionUrl'].OutputValue" --output text)
          echo "::notice title=Lambda Function Url::${{ steps.cloudformation.outputs.stack_name }}"
