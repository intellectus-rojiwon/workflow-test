name: Lambda Function ƛ

on:
  workflow_call:
    inputs:
      function_name:
        required: true
        type: string
      region: # ap-northeast-2
        required: true
        type: string
      image_uri: # include tag
        required: true
        type: string
      memory: # e.g. 1024
        required: true
        type: number
      runtime: # e.g. nodejs20.x
        required: true
        type: string
      architectures: # e.g. x86_64
        required: true
        type: string
      ephemeral_storage: # e.g. 512
        required: true
        type: number
      timeout: # e.g. 6
        required: true
        type: number
      provisioned_concurrency: # 3
        required: false
        type: number

    secrets:
      role_to_assume:
        required: true
      aws_region:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@main

      - name: Create Values
        id: value
        run: |
          ROLE_SESSION_NAME=$Lambda-${{ inputs.function_name }}
          ROLE_REVOKE_POLICY=RevokeSession-$ROLE_SESSION_NAME

          echo "role_session_name=$ROLE_SESSION_NAME" >> "$GITHUB_OUTPUT"
          echo "role_policy_name=$ROLE_REVOKE_POLICY" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials 🔑
        uses: aws-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ secrets.role_to_assume }}
          aws-region: ${{ secrets.aws_region }}
          role-session-name: ${{ steps.value.outputs.role_session_name }}

      - name: Deploy Lambda 📌
        id: function
        run: |
          LAMBDA_VERSION=$(aws lambda update-function-code --function-name ${{ inputs.function_name }} --image-uri ${{ inputs.image_uri }} --query 'Version' --output text || \
            aws lambda create-function \
              --function-name ${{ inputs.function_name }} \
              --package-type Image --code ImageUri=${{ inputs.image_uri }} \
              --region ${{ inputs.region }} \
              --architectures ${{ inputs.architectures }} \
              --runtime ${{ inputs.runtime }} \
              --memory-size ${{ inputs.memory }} \
              --ephemeral-storage Size=${{ inputs.ephemeral_storage }} \
              --timeout ${{ inputs.timeout }} \
              --query 'Version' --output text)

          echo "::notice title=Lambda Deployed::${{ inputs.function_name }}:$LAMBDA_VERSION"
          echo "version=$LAMBDA_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update Lambda URL 🛜
        run: |
          FUNCTION_HOST=$(aws lambda get-function-url-config --function-name ${{ inputs.function_name }} --auth-type NONE --query 'FunctionUrl' --output text || \
          aws lambda create-function-url-config --function-name ${{ inputs.function_name }} --auth-type NONE --query 'FunctionUrl' --output text)

          echo "::notice title=Host::$FUNCTION_HOST"

      - name: Check Provisioned Concurrency
        id: provisioned
        run: |
          if[ -z "${{ inputs.provisioned_concurrency }}" ]; then
            check=false
          else
            check=true
          fi

          echo "check=$check" >> "$GITHUB_OUTPUT"

      - name: Provisioned Concurrency 👥
        if: steps.provisioned.outputs.check == 'true'
        run: |
          if[ -z "${{ inputs.provisioned_concurrency }}" ]; then
            echo "::error title=Provisioned Concurrency Input Missing::provisioned concurrency input is missinng."
          fi

          if ! aws lambda update-alias --function-name ${{ inputs.function_name }} --name provisioned --function-version ${{ steps.function.outputs.version }} 2>/dev/null; then
            aws lambda create-alias --function-name ${{ inputs.function_name }} --name provisioned --function-version ${{ steps.function.outputs.version }}
          fi

          aws lambda put-provisioned-concurrency-config \
            --function-name ${{ inputs.function_name }} \
            --qualifier provisioned \
            --provisioned-concurrent-executions ${{ inputs.provisioned_concurrency }}

      - name: Revoke AWS Role Session 🔒
        run: |
          ROLE_NAME=$(echo ${{ secrets.role_to_assume }} | cut -d '/' -f 2-)
          ROLE_SESSION_NAME=${{ steps.value.outputs.role_session_name }}
          CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") 

          INLINE_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Deny",
                "Action": ["*"],
                "Resource": ["*"],
                "Condition": {
                  "DateLessThan": {
                    "aws:TokenIssueTime": "'"$CURRENT_TIME"'"
                  },
                  "StringEquals": {
                    "sts:RoleSessionName": "'"$ROLE_SESSION_NAME"'"
                  }
                }
              }
            ]
          }'

          aws iam put-role-policy --role-name $ROLE_NAME --policy-name ${{ steps.value.outputs.role_policy_name }} --policy-document "$INLINE_POLICY"

          echo "::notice title=Revoke Role Session::$ROLE_NAME/$ROLE_SESSION_NAME"
