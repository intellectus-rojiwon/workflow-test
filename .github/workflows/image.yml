name: Docker Image 🐳

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      version:
        required: true
        type: string
      development:
        required: true
        type: boolean
      produnction:
        required: true
        type: boolean
      push:
        required: true
        type: boolean
    secrets:
      role-to-assume:
        required: true
      aws-region:
        required: true
    outputs:
      image_uri:
        value: ${{ jobs.build_and_push.outputs.image_uri }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.image.outputs.uri }}

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@main

      - name: Create Values
        id: value
        run: |
          ROLE_SESSION_NAME=ECR-${{ inputs.repository }}-${{ inputs.version }}
          ROLE_REVOKE_POLICY=RevokeSession-$ROLE_SESSION_NAME

          ${{ inputs.repository.default }}

          echo "role_session_name=$ROLE_SESSION_NAME" >> $GITHUB_ENV
          echo "role_policy_name=$ROLE_REVOKE_POLICY" >> $GITHUB_ENV

      - name: Configure AWS credentials 🔑
        uses: aws-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ secrets.role-to-assume }}
          aws-region: ${{ secrets.aws-region }}
          role-session-name: ${{ steps.value.outputs.role_session_name }}

      - name: Login to Amazon ECR 🔑
        id: ecr
        uses: aws-actions/amazon-ecr-login@main

      - name: Init ECR Repository
        id: image
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.repository }} || \
          aws ecr create-repository --repository-name ${{ inputs.repository }} --region ${{ secrets.aws-region }}

          IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ inputs.repository }}
          echo "uri=$IMAGE_URI" >> $GITHUB_ENV

          echo "::notice title=Docker Image URI::$IMAGE_URI"

      - name: Build & Push Docker Image 🐳
        if: inputs.push == 'true'
        run: |
          IMAGE_URI=${{ steps.image.outputs.uri }}

          if ! aws ecr describe-images --repository-name ${{ inputs.repository }} --image-ids imageTag=${{ inputs.version }} > /dev/null 2>&1; then
            docker build -t $IMAGE_URI:${{ inputs.version }} .
            docker push $$IMAGE_URI:${{ inputs.version }}
            echo "::notice title=Image Created::$IMAGE_URI:${{ inputs.version }}"
          fi

          if [ ${{ inputs.development }} == "true" ]; then
            docker tag $IMAGE_URI:${{ inputs.version }} $IMAGE_URI:dev
            docker push $$IMAGE_URI:dev
            echo "::notice title=Image Created::$IMAGE_URI:dev"
          fi

          if [ ${{ inputs.produnction }} == "true" ]; then
            docker tag $IMAGE_URI:${{ inputs.version }} $IMAGE_URI:prod
            docker push $$IMAGE_URI:prod
            echo "::notice title=Image Created::$IMAGE_URI:prod"
          fi

      - name: Revoke AWS Role Session 🔒
        run: |
          ROLE_NAME=$(echo ${{ secrets.role-to-assume }} | cut -d '/' -f 2-)
          ROLE_SESSION_NAME=${{ steps.value.outputs.role_session_name }}
          CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") 

          INLINE_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Deny",
                "Action": ["*"],
                "Resource": ["*"],
                "Condition": {
                  "DateLessThan": {
                    "aws:TokenIssueTime": "'"$CURRENT_TIME"'"
                  },
                  "StringEquals": {
                    "sts:RoleSessionName": "'"$ROLE_SESSION_NAME"'"
                  }
                }
              }
            ]
          }'

          aws iam put-role-policy --role-name $ROLE_NAME --policy-name ${{ steps.value.outputs.role_policy_name }} --policy-document $INLINE_POLICY

          echo "::notice title=Revoke Role Session::$ROLE_NAME/$ROLE_SESSION_NAME"
