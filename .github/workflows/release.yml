# This is a basic workflow to help you get started with Actions

name: Release üîñ

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      development:
        description: stage Í∞úÎ∞ú Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
        required: true
        default: true
        type: boolean
      production:
        description: stage Î∞∞Ìè¨ Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
        required: true
        default: false
        type: boolean
      image: # stageÎßàÎã§ Í∞ÅÍ∞Å ÎûåÎã§Ìï®ÏàòÎäî Îî∞Î°ú Í∞ñÎäîÎã§, development, production tag Î∂ÄÏó¨
        description: Ïù¥ÎØ∏ÏßÄ Î∞∞Ìè¨ Ïã§Ìñâ, Î≤ÑÏ†Ñ ÌÉúÍ∑∏Îäî ÎçÆÏñ¥Ïì∞ÏßÄ ÏïäÎäîÎã§.
        required: true
        default: false
        type: boolean
      lambda:
        required: true
        default: true
        type: boolean
      swagger: # Ìï≠ÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
        required: true
        default: false
        type: boolean
      sdk: # Î≤ÑÏ†ÑÎ≥Ñ Î∞∞Ìè¨, development, production tag Î∂ÄÏó¨, npm view Î™ÖÎ†πÏñ¥Î°ú Í∏∞Ï°¥ Î≤ÑÏ†Ñ Î∞∞Ìè¨ Ïú†Î¨¥ ÌôïÏù∏
        required: true
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  project:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.setup.outputs.name }}
      version: ${{ steps.setup.outputs.version }}

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@main

      - name: setup
        id: setup
        run: |
          echo "name=${${{ github.repository }}##*/}" >> $GITHUB_ENV
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_ENV

  image:
    if: github.event.inputs.image == 'true'
    runs-on: ubuntu-latest
    needs:
      - project

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@main

      - name: Configure AWS credentials üîí
        uses: aws-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR üîí
        id: ecr
        uses: aws-actions/amazon-ecr-login@main

      - name: Check Repository
        run: |
          aws ecr describe-repositories --repository-names ${{ needs.project.outputs.name }} || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ vars.AWS_REGION }}

      - name: Build & Push Docker Image ‚ú®
        id: image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          if [ ${{ github.event.inputs.development }} == "true" ]; then
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:dev
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev
          fi
          if [ ${{ github.event.inputs.production }} == "true" ]; then
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:prod
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod
          fi
        env:
          ECR_REPOSITORY: ${{ needs.project.outputs.name }}
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.project.outputs.version }}

  lambda:
    runs-on: ubuntu-latest
    needs:
      - project

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@main

      - name: Configure AWS credentials üîí
        uses: aws-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR üîí
        id: ecr
        uses: aws-actions/amazon-ecr-login@main

      - name: Lambda Deploy (development)
        if: github.event.inputs.development == 'true'
        id: dev
        run: |
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI --query 'Version' --output text || \
          aws lambda create-function --function-name $FUNCTION_NAME --package-type Image --code ImageUri=$IMAGE_URI \
          --region ${{ vars.AWS_REGION }} \
          --memory-size 1024 --runtime nodejs20.x --architectures x86_64 --ephemeral-storage Size=512 \
          --timeout 6 --query 'Version' --output text
        env:
          FUNCTION_NAME: ${{ needs.project.outputs.name }}-dev
          IMAGE_URI: ${{ steps.ecr.outputs.registry }}/${{ needs.project.outputs.name }}:dev

      - name: Lambda Deploy (production)
        if: github.event.inputs.production == 'true'
        id: prod
        run: |
          LAMBDA_VERSION=$(aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI --query 'Version' --output text || \
          aws lambda create-function \
            --function-name $FUNCTION_NAME \
            --package-type Image --code ImageUri=$IMAGE_URI \
            --region ${{ vars.AWS_REGION }} \
            --architectures x86_64 \
            --runtime nodejs20.x \
            --memory-size 4096 \
            --ephemeral-storage Size=512 \
            --timeout 30 \
            --query 'Version' --output text)

           echo "version=$LAMBDA_VERSION" >> $GITHUB_ENV
        env:
          FUNCTION_NAME: ${{ needs.project.outputs.name }}-prod
          IMAGE_URI: ${{ steps.ecr.outputs.registry }}/${{ needs.project.outputs.name }}:prod

      - name: Provisioned Concurrency (production)
        if: steps.prod.conclusion == 'success'
        run: |
          aws lambda update-alias --function-name $FUNCTION_NAME --name provisioned --function-version ${{ steps.prod.outputs.version }} || \
          aws lambda create-alias --function-name $FUNCTION_NAME --name provisioned --function-version ${{ steps.prod.outputs.version }}

          aws lambda put-provisioned-concurrency-config \
            --function-name $FUNCTION_NAME \
            --qualifier provisioned
            --provisioned-concurrent-executions 3
        env:
          FUNCTION_NAME: ${{ needs.project.outputs.name }}-prod

      - name: Update Lambda URL (development, production)
        run: |
          if [ ${{ github.event.inputs.development }} == 'true' && ${{ steps.dev.conclusion }} == 'success' ]; then
            aws lambda get-function-url-config --function-name ${{ needs.project.outputs.name }}-dev || \
            aws lambda create-function-url-config --function-name ${{ needs.project.outputs.name }}-dev
          fi
          if [ ${{ github.event.inputs.production }} == 'true' && ${{ steps.prod.conclusion }} == 'success' ]; then
            aws lambda get-function-url-config --function-name ${{ needs.project.outputs.name }}-prod || \
            aws lambda create-function-url-config --function-name ${{ needs.project.outputs.name }}-prod
          fi

  # Î≤ÑÏ†ÑÏóê Ìï¥ÎãπÌïòÎäî Release note, npm lib ÏóÜÎã§Î©¥ Î∞∞Ìè¨
  # npm tagÎßå Î≥ÑÎèÑÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
